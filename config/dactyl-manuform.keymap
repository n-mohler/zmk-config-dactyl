#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0

/ {
    combos {
        compatible = "zmk,combos";

        back_combo {
            bindings = <&kp DELETE>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q     &kp W           &kp F            &kp P  &kp B                                  &kp J          &kp L  &kp U         &kp DE_Y        &kp DE_SLASH
&kp A     &kp R           &kp S            &kp T  &kp G                                  &kp M          &kp N  &kp E         &kp I           &kp O
&kp DE_Z  &kp X           &kp C            &kp D  &kp V                                  &kp K          &kp H  &kp COMMA     &kp DOT         &kp DE_SQT
          &kp LEFT_ARROW  &kp RIGHT_ARROW                                                                      &kp UP_ARROW  &kp DOWN_ARROW
                                           &mo 2                                                        &mo 2
                                                  &kp SPACE   &kp TAB  &kp ENTER         &mo 1
                                                  &kp ESCAPE  &mo 4    &kp LEFT_COMMAND  &kp BACKSPACE
            >;
        };

        shift {
            bindings = <
&kp RS(Q)  &kp RS(W)           &kp RS(F)            &kp RS(P)  &kp RS(B)                              &kp LS(J)  &kp LS(L)  &kp LS(U)         &kp LS(Z)            &kp DE_QUESTION
&kp RS(A)  &kp RS(R)           &kp RS(S)            &kp RS(T)  &kp RS(G)                              &kp LS(M)  &kp LS(N)  &kp LS(E)         &kp LS(I)            &kp LS(O)
&kp RS(Y)  &kp RS(X)           &kp RS(C)            &kp RS(D)  &kp RS(V)                              &kp LS(K)  &kp LS(H)  &kp DE_LESS_THAN  &kp DE_GREATER_THAN  &kp DE_DOUBLE_QUOTES
           &kp RS(LEFT_ARROW)  &kp RS(RIGHT_ARROW)                                                                          &kp LS(UP_ARROW)  &kp LS(DOWN)
                                                    &trans                                                       &trans
                                                               &trans     &kp LS(TAB)  &kp LS(ENTER)  &trans
                                                               &trans     &trans       &trans         &trans
            >;
        };

        symbols {
            bindings = <
&kp DE_EXCLAMATION  &kp DE_AT_SIGN       &kp DE_HASH           &kp DE_DOLLAR             &kp DE_PERCENT                      &kp DE_CARET  &kp DE_AMPERSAND   &kp DE_EURO   &kp DE_DEGREE  &kp DE_BACKSLASH
&kp DE_GRAVE        &kp DE_TILDE         &kp DE_LEFT_BRACKET   &kp DE_LEFT_PARENTHESIS   &kp DE_LEFT_BRACE                   &kp DE_COLON  &kp DE_UNDERSCORE  &kp DE_EQUAL  &kp DE_ASTRK   &kp DE_SEMICOLON
&kp DE_LESS_THAN    &kp DE_GREATER_THAN  &kp DE_RIGHT_BRACKET  &kp DE_RIGHT_PARENTHESIS  &kp DE_RIGHT_BRACE                  &kp DE_PIPE   &kp DE_MINUS       &kp DE_PLUS   &kp DE_ACUTE   &kp DE_SECTION
                    &kp HOME             &kp END                                                                                                              &kp PAGE_UP   &kp PAGE_DOWN
                                                               &trans                                                                      &trans
                                                                                         &trans              &trans  &trans  &trans
                                                                                         &trans              &trans  &trans  &trans
            >;
        };

        numbers {
            bindings = <
&trans        &trans        &trans            &kp LEFT_ARROW  &kp RIGHT_ARROW                  &kp DE_SLASH     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp DE_MINUS
&kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans                           &kp DE_ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6   &kp DE_PLUS
&trans        &trans        &trans            &kp DOWN_ARROW  &kp UP_ARROW                     &kp NUMBER_0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp DE_EQUAL
              &trans        &trans                                                                                            &kp DE_COMMA  &kp DE_PERIOD
                                              &trans                                                            &trans
                                                              &trans           &trans  &trans  &trans
                                                              &trans           &trans  &trans  &trans
            >;
        };

        media {
            bindings = <
&kp K_MUTE    &kp C_PLAY_PAUSE   &kp C_PREVIOUS   &kp C_NEXT  &trans                          &trans             &trans               &trans                &trans                &trans
&kp LC(A)     &kp LC(S)          &trans           &kp LC(F)   &kp LEFT_SHIFT                  &kp DE_ESZETT      &kp DE_O_UMLAUT      &kp DE_A_UMLAUT       &kp DE_U_UMLAUT       &trans
&kp LC(DE_Z)  &kp LC(X)          &kp LC(C)        &kp LC(V)   &trans                          &trans             &kp LS(DE_O_UMLAUT)  &kp LS(DE_U_UMLAUT)   &kp LS(DE_U_UMLAUT)   &trans
              &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                                                                                      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
                                                  &trans                                                         &trans
                                                              &trans          &trans  &trans  &trans
                                                              &trans          &trans  &trans  &kp LC(BACKSPACE)
            >;
        };

        function {
            bindings = <
&bt BT_CLR    &trans        &trans        &trans        &trans                        &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&trans        &trans        &trans        &trans        &trans                        &kp F11  &kp F12  &kp F13  &kp F14  &kp F15
              &trans        &kp K_SLEEP                                                                 &trans   &trans
                                          &trans                                               &trans
                                                        &trans        &trans  &trans  &trans
                                                        &trans        &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        numpad {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        function {
            if-layers = <2 4>;
            then-layer = <5>;
        };
    };
};
