#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0

/ {
    combos {
        compatible = "zmk,combos";

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            layers = <0>;
            timeout-ms = <40>;
            slow-release;
            require-prior-idle-ms = <100>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 23>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_save {
            bindings = <&kp LC(S)>;
            key-positions = <12 11>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_undo {
            bindings = <&kp LC(DE_Z)>;
            key-positions = <11 10>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_find {
            bindings = <&kp LC(F)>;
            key-positions = <12 13>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_quit {
            bindings = <&kp LC(Q)>;
            key-positions = <1 0>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_del {
            bindings = <&kp DELETE>;
            key-positions = <26 27>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_ctrl_l {
            bindings = <&kp LC(L)>;
            key-positions = <17 28>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_close_tab {
            bindings = <&kp LC(W)>;
            key-positions = <1 2>;
        };

        combo_select_all {
            bindings = <&kp LC(A)>;
            key-positions = <11 13>;
        };

        combo_greeting {
            bindings = <&greeting>;
            key-positions = <7 8 9>;
        };
    };

    behaviors {
        caps_word: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS BACKSPACE>;
        };

        slash_morph: slash_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_MORPH";
            bindings = <&kp DE_SLASH>, <&kp DE_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dash_morph: dash_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DASH_MORPH";
            bindings = <&kp DE_MINUS>, <&kp DE_EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        period_morph: period_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_MORPH";
            bindings = <&kp PERIOD>, <&kp DE_QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        single_quote_morph: single_quote_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SINGLE_QUOTE_MORPH";
            bindings = <&kp DE_SINGLE_QUOTE>, <&kp DE_UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        greeting: greeting {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DE_SLASH &kp P &kp SPACE &kp DE_Y &kp O &kp DE_Y &kp O &kp DE_Y &kp O>;
            label = "GREETING";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp B  &kp L           &kp D            &kp W      &kp DE_Z                                   &single_quote_morph  &kp F  &kp O          &kp U           &kp J
&kp N  &kp R           &kp T            &kp S      &kp G                                      &kp DE_Y             &kp H  &kp A          &kp E           &kp I
&kp Q  &kp X           &kp M            &kp C      &kp V                                      &kp K                &kp P  &period_morph  &dash_morph     &slash_morph
       &kp LEFT_ARROW  &kp RIGHT_ARROW                                                                                    &kp UP_ARROW   &kp DOWN_ARROW
                                        &kp ENTER                                                                  &mo 1
                                                   &kp LEFT_SHIFT  &kp BACKSPACE     &kp TAB  &kp SPACE
                                                   &kp ESCAPE      &kp LEFT_COMMAND  &mo 3    &mo 2
            >;
        };

        symbols {
            bindings = <
&kp DE_GRAVE  &kp DE_LESS_THAN  &kp DE_GREATER_THAN  &kp DE_MINUS          &kp DE_PIPE                               &kp DE_CARET  &kp DE_LEFT_BRACE        &kp DE_RIGHT_BRACE        &kp DE_DOLLAR     &kp DE_DEGREE
&kp DE_EURO   &kp DE_ASTERISK   &kp DE_SLASH         &kp DE_EQUAL          &kp DE_AMPERSAND                          &kp DE_HASH   &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_SEMICOLON  &kp DE_DOUBLE_QUOTES
&kp DE_TILDE  &kp DE_PLUS       &kp DE_LEFT_BRACKET  &kp DE_RIGHT_BRACKET  &kp DE_PERCENT                            &kp DE_AT     &kp DE_COLON             &kp DE_PERIOD             &kp DE_COMMA      &kp DE_BACKSLASH
              &none             &none                                                                                                                       &none                     &none
                                                     &kp ENTER                                                                     &trans
                                                                           &kp LEFT_SHIFT    &kp BACKSPACE  &kp TAB  &kp SPACE
                                                                           &kp ESCAPE        &kp LEFT_GUI   &mo 3    &mo 2
            >;
        };

        numpad {
            bindings = <
&kp DE_SLASH  &kp N9  &kp N8  &kp N7     &kp DE_ASTERISK                             &none      &none  &none  &none  &none
&kp DE_MINUS  &kp N3  &kp N2  &kp N1     &kp DE_PLUS                                 &none      &none  &none  &none  &none
&kp DE_COMMA  &kp N6  &kp N5  &kp N4     &kp DE_PERIOD                               &none      &none  &none  &none  &none
              &none   &none                                                                            &none  &none
                              &kp ENTER                                                         &mo 1
                                         &kp NUMBER_0     &kp BACKSPACE     &kp TAB  &kp SPACE
                                         &kp ESCAPE       &kp LEFT_COMMAND  &mo 3    &trans
            >;
        };

        navigation {
            bindings = <
&kp K_MUTE  &kp C_PLAY_PAUSE   &kp C_PREVIOUS   &kp C_NEXT  &none                &none          &none                &none                &none                &none
&none       &none              &none            &none       &none                &kp DE_ESZETT  &kp DE_O_UMLAUT      &kp DE_A_UMLAUT      &kp DE_U_UMLAUT      &none
&none       &none              &none            &none       &none                &none          &kp LS(DE_O_UMLAUT)  &kp LS(DE_A_UMLAUT)  &kp LS(DE_U_UMLAUT)  &none
            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                                                                       &none                &none
                                                &none                                           &none
                                                            &none  &none  &none  &none
                                                            &none  &mo 4  &none  &none
            >;
        };

        function {
            bindings = <
&bt BT_CLR    &none         &none         &none         &none                         &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&none         &none         &none         &none         &none                         &kp F11  &kp F12  &kp F13  &kp F14  &kp F15
              &none         &none                                                                       &none    &none
                                          &none                                                &none
                                                        &none         &none   &none   &none
                                                        &none         &trans  &trans  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
