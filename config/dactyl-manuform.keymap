#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0

/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q  &kp W           &kp F            &kp P  &kp B                             &kp J         &kp L  &kp U         &kp Z           &kp MINUS
&kp A  &kp R           &kp S            &kp T  &kp G                             &kp M         &kp N  &kp E         &kp I           &kp O
&kp Y  &kp X           &kp C            &kp D  &kp V                             &kp K         &kp H  &kp COMMA     &kp DOT         &kp LS(NON_US_BACKSLASH)
       &kp LEFT_ARROW  &kp RIGHT_ARROW                                                                &kp UP_ARROW  &kp DOWN_ARROW
                                        &mo 1                                                  &mo 2
                                               &kp SPACE  &kp TAB  &kp BSPC      &kp ENTER
                                               &kp LCTRL  &mo 3    &kp LEFT_GUI  &kp LEFT_ALT
            >;
        };

        shift {
            bindings = <
&kp LS(Q)  &kp LS(W)     &kp LS(F)      &kp LS(P)  &kp LS(B)                                     &kp LS(J)         &kp LS(L)  &kp LS(U)             &kp LS(Z)                 &kp SEMICOLON
&kp LS(A)  &kp LS(R)     &kp LS(S)      &kp LS(T)  &kp LS(G)                                     &kp LS(M)         &kp LS(N)  &kp LS(E)             &kp LS(I)                 &kp LS(O)
&kp LS(Y)  &kp LS(X)     &kp LS(C)      &kp LS(D)  &kp LS(V)                                     &kp LS(K)         &kp LS(H)  &kp NON_US_BACKSLASH  &kp LS(NON_US_BACKSLASH)  &kp LS(N2)
           &kp LS(LEFT)  &kp LS(RIGHT)                                                                                        &kp LS(UP_ARROW)      &kp LS(DOWN)
                                        &trans                                                                     &mo 2
                                                   &kp LS(SPACE)  &kp LS(TAB)  &kp LS(BSPC)      &kp LS(ENTER)
                                                   &kp LS(LCTRL)  &mo 3        &kp LS(LEFT_GUI)  &kp LS(LEFT_ALT)
            >;
        };

        symbols {
            bindings = <
&kp LS(N1)        &kp LS(MINUS)         &kp RA(N7)  &kp RA(N0)  &kp RA(E)                          &kp LS(N7)                &kp N7  &kp N8  &kp N9        &kp LS(RIGHT_BRACKET)
&kp LS(NUMBER_6)  &kp NON_US_BACKSLASH  &kp LS(N8)  &kp LS(N9)  &kp LS(N7)                         &kp LS(NON_US_BACKSLASH)  &kp N4  &kp N5  &kp NUMBER_6  &kp RIGHT_BRACKET
&kp LS(N4)        &kp LS(N5)            &kp RA(N8)  &kp RA(N9)  &kp LS(SEMICOLON)                  &kp N0                    &kp N1  &kp N2  &kp N3        &kp LS(N0)
                  &trans                &trans                                                                                       &trans  &trans
                                                    &trans                                                                   &trans
                                                                &trans             &trans  &trans  &trans
                                                                &trans             &trans  &trans  &trans
            >;
        };

        media {
            bindings = <
&kp K_MUTE  &kp C_PLAY_PAUSE   &kp C_PREVIOUS   &kp C_NEXT  &trans                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2          &trans                &bt BT_CLR
&kp LC(A)   &kp LC(S)          &trans           &kp LC(F)   &trans                  &trans        &kp SEMI      &kp SINGLE_QUOTE      &kp LEFT_BRACKET      &trans
&kp LC(Z)   &kp LC(X)          &kp LC(C)        &kp LC(V)   &trans                  &trans        &kp LS(SEMI)  &kp LS(SINGLE_QUOTE)  &kp LS(LEFT_BRACKET)  &trans
            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                                                                  &trans                &trans
                                                &trans                                            &trans
                                                            &trans  &trans  &trans  &trans
                                                            &trans  &trans  &trans  &trans
            >;
        };
    };
};
