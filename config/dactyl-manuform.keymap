#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0

/ {
    behaviors {
        ts: tap-shift {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_SHIFT";
            bindings = <&kp>, <&lt>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 39 37 38 40 41 42 43>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q     &kp W           &kp F            &kp P             &kp B                                  &kp J             &kp L  &kp U         &kp DE_Y        &kp DE_SLASH
&kp A     &kp R           &kp S            &kp T             &kp G                                  &kp M             &kp N  &kp E         &kp I           &kp O
&kp DE_Z  &kp X           &kp C            &kp D             &kp V                                  &kp K             &kp H  &kp COMMA     &kp DOT         &kp DE_SQT
          &kp LEFT_ARROW  &kp RIGHT_ARROW                                                                                    &kp UP_ARROW  &kp DOWN_ARROW
                                           &ts LEFT_SHIFT 1                                                           &mo 2
                                                             &kp SPACE   &kp TAB  &kp BACKSPACE     &kp ENTER
                                                             &kp ESCAPE  &mo 4    &kp LEFT_COMMAND  &kp LEFT_CONTROL
            >;
        };

        shift {
            bindings = <
&kp RS(Q)  &kp RS(W)           &kp RS(F)            &kp RS(P)  &kp RS(B)                                     &kp LS(J)         &kp LS(L)  &kp LS(U)         &kp LS(Z)            &kp DE_QUESTION
&kp RS(A)  &kp RS(R)           &kp RS(S)            &kp RS(T)  &kp RS(G)                                     &kp LS(M)         &kp LS(N)  &kp LS(E)         &kp LS(I)            &kp LS(O)
&kp RS(Y)  &kp RS(X)           &kp RS(C)            &kp RS(D)  &kp RS(V)                                     &kp LS(K)         &kp LS(H)  &kp DE_LESS_THAN  &kp DE_GREATER_THAN  &kp DE_DOUBLE_QUOTES
           &kp RS(LEFT_ARROW)  &kp RS(RIGHT_ARROW)                                                                                        &kp LS(UP_ARROW)  &kp LS(DOWN)
                                                    &none                                                                      &mo 3
                                                               &kp RS(SPACE)  &kp RS(TAB)  &kp LS(BSPC)      &kp LS(ENTER)
                                                               &kp RS(LCTRL)  &trans       &kp LS(LEFT_GUI)  &kp LS(LEFT_ALT)
            >;
        };

        symbols {
            bindings = <
&kp DE_EXCLAMATION  &kp DE_AT_SIGN       &kp DE_HASH           &kp DE_DOLLAR             &kp DE_PERCENT                      &kp DE_CARET  &kp DE_AMPERSAND   &kp DE_EURO   &trans         &kp DE_BACKSLASH
&kp DE_GRAVE        &kp DE_TILDE         &kp DE_LEFT_BRACKET   &kp DE_LEFT_PARENTHESIS   &kp DE_LEFT_BRACE                   &kp DE_COLON  &kp DE_UNDERSCORE  &kp DE_EQUAL  &kp DE_ASTRK   &kp DE_SEMICOLON
&kp DE_LESS_THAN    &kp DE_GREATER_THAN  &kp DE_RIGHT_BRACKET  &kp DE_RIGHT_PARENTHESIS  &kp DE_RIGHT_BRACE                  &kp DE_PIPE   &kp DE_MINUS       &kp DE_PLUS   &trans         &trans
                    &kp HOME             &kp END                                                                                                              &kp PAGE_UP   &kp PAGE_DOWN
                                                               &mo 3                                                                       &trans
                                                                                         &trans              &trans  &trans  &trans
                                                                                         &trans              &trans  &trans  &trans
            >;
        };

        numbers {
            bindings = <
&trans        &trans        &trans            &trans          &trans                  &kp DE_SLASH     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp DE_MINUS
&kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans                  &kp DE_ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6   &kp DE_PLUS
&trans        &trans        &trans            &trans          &trans                  &kp NUMBER_0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp ENTER
              &trans        &trans                                                                                   &kp DE_COMMA  &kp DE_PERIOD
                                              &trans                                                   &trans
                                                              &trans  &trans  &trans  &trans
                                                              &trans  &trans  &trans  &trans
            >;
        };

        media {
            bindings = <
&kp K_MUTE  &kp C_PLAY_PAUSE   &kp C_PREVIOUS   &kp C_NEXT  &trans                           &bt BT_SEL 0   &bt BT_SEL 1         &bt BT_SEL 2         &bt BT_SEL 3         &bt BT_CLR
&kp LC(A)   &kp LC(S)          &trans           &kp LC(F)   &kp LEFT_SHIFT                   &kp DE_ESZETT  &kp DE_O_UMLAUT      &kp DE_A_UMLAUT      &kp DE_U_UMLAUT      &trans
&kp LC(Y)   &kp LC(X)          &kp LC(C)        &kp LC(V)   &trans                           &trans         &kp LS(DE_O_UMLAUT)  &kp LS(DE_U_UMLAUT)  &kp LS(DE_U_UMLAUT)  &trans
            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                                                                                   &trans               &trans
                                                &mo 3                                                       &mo 3
                                                            &trans          &trans  &kp DEL  &trans
                                                            &trans          &trans  &trans   &trans
            >;
        };
    };
};
