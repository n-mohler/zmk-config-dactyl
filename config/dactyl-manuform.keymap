#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0

/ {
    combos {
        compatible = "zmk,combos";

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            layers = <0>;
            timeout-ms = <40>;
            slow-release;
            require-prior-idle-ms = <100>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 23>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_save {
            bindings = <&kp LC(S)>;
            key-positions = <12 11>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_undo {
            bindings = <&kp LC(DE_Z)>;
            key-positions = <11 10>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_find {
            bindings = <&kp LC(F)>;
            key-positions = <12 13>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_quit {
            bindings = <&kp LC(Q)>;
            key-positions = <1 0>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_del {
            bindings = <&kp DELETE>;
            key-positions = <26 27>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_ctrl_l {
            bindings = <&kp LC(L)>;
            key-positions = <17 28>;
            timeout-ms = <40>;
            layers = <0>;
        };

        combo_close_tab {
            bindings = <&kp LC(W)>;
            key-positions = <1 2>;
        };

        combo_select_all {
            bindings = <&kp LC(A)>;
            key-positions = <11 13>;
        };
    };

    behaviors {
        caps_word: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS BACKSPACE>;
        };

        hm_left: hm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 15 16 17 18 25 26 27 28 32 33 9 19 29 35 39 43 38 42>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <200>;
        };

        hm_right: hm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 34 36 37 40 41>;
            tapping-term-ms = <200>;
        };

        soft_off: soft_off {
            compatible = "zmk,behavior-soft-off";
            label = "SOFT_OFF";
            #binding-cells = <0>;
            hold-time-ms = <1000>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp W  &kp L           &kp DE_Y         &kp P  &kp B                                      &kp DE_Z   &kp F              &kp O          &kp U           &kp DE_SINGLE_QUOTE
&kp C  &hm_left 2 R    &hm_left 1 S     &kp T  &kp G                                      &kp M      &hm_right 3 N      &hm_right 1 E  &hm_right 2 I   &kp A
&kp Q  &kp J           &kp V            &kp D  &kp K                                      &kp X      &kp H              &kp COMMA      &kp DOT         &kp DE_SLASH
       &kp LEFT_ARROW  &kp RIGHT_ARROW                                                                                  &kp UP_ARROW   &kp DOWN_ARROW
                                        &none                                                        &kp DE_UNDERSCORE
                                               &kp ENTER   &kp BACKSPACE     &key_repeat  &kp SPACE
                                               &kp ESCAPE  &kp LEFT_COMMAND  &mo 4        &kp TAB
            >;
        };

        shift {
            bindings = <
&kp RS(W)  &kp RS(L)           &kp RS(DE_Y)         &kp RS(P)  &kp RS(B)                                      &kp LS(DE_Z)   &kp LS(F)          &kp LS(O)           &kp LS(U)        &kp DE_DOUBLE_QUOTES
&kp RS(C)  &kp RS(R)           &kp RS(S)            &kp RS(T)  &kp RS(G)                                      &kp LS(M)      &kp LS(N)          &kp LS(E)           &kp LS(I)        &kp LS(A)
&kp RS(Q)  &kp RS(J)           &kp RS(V)            &kp RS(D)  &kp RS(K)                                      &kp LS(X)      &kp LS(H)          &kp DE_EXCLAMATION  &kp DE_QUESTION  &kp DE_SLASH
           &kp RS(LEFT_ARROW)  &kp RS(RIGHT_ARROW)                                                                                              &kp LS(UP_ARROW)    &kp LS(DOWN)
                                                    &none                                                                    &kp DE_UNDERSCORE
                                                               &kp LS(ENTER)  &kp LS(BACKSPACE)  &key_repeat  &kp LS(SPACE)
                                                               &kp LS(ESC)    &kp LS(TAB)        &none        &kp LS(TAB)
            >;
        };

        symbols {
            bindings = <
&kp DE_GRAVE  &kp DE_LESS_THAN  &kp DE_GREATER_THAN  &kp DE_MINUS          &kp DE_PIPE                                   &kp DE_CARET  &kp DE_LEFT_BRACE        &kp DE_RIGHT_BRACE        &kp DE_DOLLAR     &none
&kp DE_EURO   &kp DE_ASTERISK   &kp DE_SLASH         &kp DE_EQUAL          &kp DE_AMPERSAND                              &kp DE_HASH   &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_SEMICOLON  &kp DE_DOUBLE_QUOTES
&kp DE_TILDE  &kp DE_PLUS       &kp DE_LEFT_BRACKET  &kp DE_RIGHT_BRACKET  &kp DE_PERCENT                                &kp DE_AT     &kp DE_COLON             &kp DE_COMMA              &kp DE_PERIOD     &kp DE_BACKSLASH
              &none             &none                                                                                                                           &none                     &none
                                                     &none                                                                             &kp DE_UNDERSCORE
                                                                           &kp ENTER         &kp BACKSPACE  &key_repeat  &kp SPACE
                                                                           &kp ESCAPE        &kp LEFT_GUI   &none        &kp TAB
            >;
        };

        numpad {
            bindings = <
&kp DE_SLASH  &kp N9  &kp N8  &kp N7  &kp DE_ASTERISK                &none  &none   &none  &none  &none
&kp DE_MINUS  &kp N3  &kp N2  &kp N1  &kp DE_PLUS                    &none  &none   &none  &none  &none
&kp DE_COMMA  &kp N6  &kp N5  &kp N4  &kp DE_PERIOD                  &none  &none   &none  &none  &none
              &none   &none                                                         &none  &none
                              &none                                         &tog 3
                                      &kp NUMBER_0     &none  &none  &none
                                      &none            &none  &none  &none
            >;
        };

        navigation {
            bindings = <
&kp K_MUTE  &kp C_PLAY_PAUSE   &kp C_PREVIOUS   &kp C_NEXT  &none                &none          &none                &none                &none                &none
&none       &none              &none            &none       &none                &kp DE_ESZETT  &kp DE_O_UMLAUT      &kp DE_A_UMLAUT      &kp DE_U_UMLAUT      &none
&none       &none              &none            &none       &none                &none          &kp LS(DE_O_UMLAUT)  &kp LS(DE_A_UMLAUT)  &kp LS(DE_U_UMLAUT)  &none
            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                                                                       &none                &none
                                                &none                                           &none
                                                            &none  &none  &none  &none
                                                            &none  &mo 5  &none  &none
            >;
        };

        function {
            bindings = <
&bt BT_CLR    &none         &none         &none         &none                         &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&none         &none         &none         &none         &none                         &kp F11  &kp F12  &kp F13  &kp F14  &kp F15
              &none         &none                                                                       &none    &none
                                          &none                                                &none
                                                        &none         &none   &none   &none
                                                        &none         &trans  &trans  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
