#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0

/ {
    combos {
        compatible = "zmk,combos";

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 13>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_ctrl_b {
            bindings = <&kp LC(B)>;
            key-positions = <11 12>;
            layers = <0>;
            timeout-ms = <40>;
        };

        combo_save {
            bindings = <&kp LC(S)>;
            key-positions = <12 13>;
            layers = <0>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <26 27>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <27 28>;
            layers = <0>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
            layers = <0>;
        };

        return {
            bindings = <&kp RETURN>;
            key-positions = <17 18>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q     &kp W           &kp F            &kp P      &kp B                                        &kp J      &kp L  &kp U         &kp DE_Y        &kp DE_SINGLE_QUOTE
&kp A     &kp R           &kp S            &kp T      &kp G                                        &kp M      &kp N  &kp E         &kp I           &kp O
&kp DE_Z  &kp X           &kp C            &kp D      &kp V                                        &kp K      &kp H  &kp COMMA     &kp DOT         &kp DE_SLASH
          &kp LEFT_ARROW  &kp RIGHT_ARROW                                                                            &kp UP_ARROW  &kp DOWN_ARROW
                                           &kp ENTER                                                          &mo 2
                                                      &mo 1       &kp BACKSPACE  &key_repeat       &kp SPACE
                                                      &kp ESCAPE  &kp TAB        &kp LEFT_COMMAND  &mo 3
            >;
        };

        shift {
            bindings = <
&kp RS(Q)  &kp RS(W)           &kp RS(F)            &kp RS(P)      &kp RS(B)                                    &kp LS(J)      &kp LS(L)  &kp LS(U)           &kp LS(Z)             &kp DE_GRAVE
&kp RS(A)  &kp RS(R)           &kp RS(S)            &kp RS(T)      &kp RS(G)                                    &kp LS(M)      &kp LS(N)  &kp LS(E)           &kp LS(I)             &kp LS(O)
&kp RS(Y)  &kp RS(X)           &kp RS(C)            &kp RS(D)      &kp RS(V)                                    &kp LS(K)      &kp LS(H)  &kp DE_EXCLAMATION  &kp DE_DOUBLE_QUOTES  &kp DE_QUESTION
           &kp RS(LEFT_ARROW)  &kp RS(RIGHT_ARROW)                                                                                        &kp LS(UP_ARROW)    &kp LS(DOWN)
                                                    &kp LS(ENTER)                                                              &none
                                                                   &trans       &kp LS(BACKSPACE)  &key_repeat  &kp LS(SPACE)
                                                                   &kp LS(ESC)  &kp LS(TAB)        &none        &none
            >;
        };

        symbols {
            bindings = <
&kp DE_TILDE      &kp DE_EXCLAMATION  &kp DE_LEFT_BRACE        &kp DE_RIGHT_BRACE        &kp DE_EURO                                     &kp DE_PIPE       &kp DE_PERCENT    &kp DE_PLUS          &kp DE_EQUAL          &kp DE_DEGREE
&kp DE_AT_SIGN    &kp DE_AMPERSAND    &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_LEFT_BRACE                               &kp DE_CARET      &kp DE_ASTRK      &kp DE_HASH          &kp DE_DOLLAR         &kp DE_MINUS
&kp DE_SEMICOLON  &kp DE_UNDERSCORE   &kp DE_LEFT_BRACKET      &kp DE_RIGHT_BRACKET      &kp DE_RIGHT_BRACE                              &kp DE_BACKSLASH  &kp DE_LESS_THAN  &kp DE_GREATER_THAN  &kp DE_DOUBLE_QUOTES  &kp DE_COLON
                  &none               &none                                                                                                                                  &none                &none
                                                               &none                                                                                       &trans
                                                                                         &none               &kp BACKSPACE  &key_repeat  &kp SPACE
                                                                                         &none               &none          &none        &none
            >;
        };

        numbers {
            bindings = <
&kp K_MUTE  &kp C_PP             &kp C_PREVIOUS       &kp C_NEXT           &none                                       &kp DE_PLUS      &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp DE_MINUS
&none       &kp DE_U_UMLAUT      &kp DE_A_UMLAUT      &kp DE_O_UMLAUT      &kp DE_ESZETT                               &kp DE_ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0
&none       &kp LS(DE_U_UMLAUT)  &kp LS(DE_A_UMLAUT)  &kp LS(DE_O_UMLAUT)  &none                                       &kp DE_PERIOD    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DE_SLASH
            &kp C_VOLUME_DOWN    &kp C_VOLUME_UP                                                                                                      &none         &none
                                                      &none                                                                             &none
                                                                           &kp LEFT_SHIFT  &kp BACKSPACE  &key_repeat  &kp SPACE
                                                                           &mo 4           &none          &none        &trans
            >;
        };

        function {
            bindings = <
&bt BT_CLR    &none         &none         &none         &none                       &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&none         &none         &none         &none         &none                       &kp F11  &kp F12  &kp F13  &kp F14  &kp F15
              &none         &none                                                                     &none    &none
                                          &none                                              &none
                                                        &none         &none  &none  &none
                                                        &trans        &none  &none  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
